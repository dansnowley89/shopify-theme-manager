{"version":3,"file":"contentScript.2158da375ebc72b56444.hot-update.js","mappings":";;;;;;;;;;;AAAA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvFA","sources":["webpack://chrome-extension-boilerplate-react/./src/pages/Content/index.js","webpack://chrome-extension-boilerplate-react/webpack/runtime/getFullHash"],"sourcesContent":["// TODO: \n// 1. Testing\n\ninit();\n\nfunction init() {\n  // Use regex on document to test for a Shopify site - https://github.com/Shopify/shopify-theme-inspector/blob/master/src/detectShopify.ts\n  const scripts = document.querySelectorAll('script');\n  for (let i = 0; i < scripts.length; i++) {\n    const content = scripts[i].textContent;\n\n    if (typeof content === 'string') {\n\n      if (/Shopify\\.shop\\s*=/.test(content)) {\n        const jsonString = content;\n\n        // Regular expression to match JSON objects from contents of script tag.\n        const regex = /{[^}]*}/g;\n        const objectsArray = jsonString.match(regex);\n\n        if (objectsArray) {\n          const parsedObjects = objectsArray.map(objectString => JSON.parse(objectString));\n\n          const theme = parsedObjects.filter((item) => item.id)[0]\n          const hostDomain = `https://${window.location.host}`;\n          const customiserUrl = `${hostDomain}/admin/themes/${theme.id}/editor`;\n          const codeUrl = `${hostDomain}/admin/themes/${theme.id}`;\n          const previewUrl = `${hostDomain}/?preview_theme_id=${theme.id}`;\n\n          const themeData = [theme.name, previewUrl, codeUrl, customiserUrl, hostDomain];\n\n          addToExtension(themeData, 0)\n        } else {\n          console.log(\"No objects found in the string.\");\n        }\n\n        break;\n      }\n    }\n  }\n}\n\nfunction addToExtension(theme, themeCount) {\n  const themeArr = [];\n  // Get currently locally stored themes.\n  chrome.storage.local.get([\"themes\"]).then((result) => {\n    themeArr[themeCount] = {\n      themeHeading: theme[0],\n      previewLink: theme[1],\n      codeLink: theme[2],\n      customiserLink: theme[3],\n      storeDomain: theme[4]\n    };\n\n    let combinedThemeArray;\n    let storedThemes = [];\n\n    if (result.themes) {\n      // Clear any identical themes\n      let i = 0;\n      for (const theme of result.themes) {\n        if (theme.previewLink === themeArr[themeCount].previewLink) {\n          result.themes.splice(i, 1);\n        }\n\n        i++;\n      }\n\n      storedThemes = result.themes;\n    }\n\n    combinedThemeArray = [themeArr[themeCount], ...storedThemes];\n\n    chrome.storage.local.clear(function () {\n      var error = chrome.runtime.lastError;\n      if (error) {\n        console.error(error);\n      }\n      // Set storage after clearing existing.\n      chrome.storage.local.set({ themes: combinedThemeArray }).then(() => {\n        console.log(\"Links set\");\n      });\n\n    });\n    chrome.storage.sync.clear(); // callback is optional\n\n  });\n}","__webpack_require__.h = () => (\"d9d20cb95a20e07ea30a\")"],"names":[],"sourceRoot":""}