{"version":3,"file":"contentScript.98f2260abfe51d8c6311.hot-update.js","mappings":";;;;;;;;;;;AAAA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1FA","sources":["webpack://chrome-extension-boilerplate-react/./src/pages/Content/index.js","webpack://chrome-extension-boilerplate-react/webpack/runtime/getFullHash"],"sourcesContent":["function checkIframeLoaded() {\n  // Get a handle to the iframe element\n  var iframeContainer = document.getElementById('AppFrameMain');\n\n  const iframe = iframeContainer.querySelectorAll('iframe');\n\n  if (iframe.length === 1) {\n    const iframeDoc = iframe[0].contentWindow.document;\n\n    if (iframeDoc.readyState === 'complete') {\n      const themes = [];\n\n      let themeCount = 0;\n\n      // Listener for when '...' is clicked\n      const ddMenu = iframeDoc.querySelectorAll('[aria-label=\"Click for more theme actions\"]');\n\n      for (let i = 0; i < ddMenu.length; i++) {\n\n        // eslint-disable-next-line no-loop-func\n        ddMenu[i].addEventListener('click', () => {\n          setTimeout(() => {\n            const previewLink = iframeDoc.querySelectorAll('[aria-label=\"Preview (opens in a new window)\"]');\n\n            // TODO: Add to extension for when left and right mouse button(context menu) is clicked.\n            previewLink[0].addEventListener('click', (e) => {\n              addToExtension(e.currentTarget.getAttribute('href'), themeCount, themes);\n              themeCount++;\n            });\n\n            previewLink[0].addEventListener('contextmenu', (e) => {\n              addToExtension(e.currentTarget.getAttribute('href'), themeCount, themes);\n              themeCount++;\n            })\n\n          }, 500);\n        });\n\n      }\n\n      return;\n    }\n\n    function addToExtension(theme, themeCount, themeArr) {\n      // Get currently locally stored themes.\n      chrome.storage.local.get([\"themes\"]).then((result) => {\n        themeArr[themeCount] = {\n          previewLink: theme,\n          // TODO: Take the 'theme' var, take the preview theme id and assemble it to customiser url.\n          // customiserLink: linksSelect[1].getAttribute('href')\n        };\n\n        let combinedThemeArray;\n\n        if (result.themes) {\n          const storedThemes = result.themes;\n          combinedThemeArray = [themeArr[themeCount], ...storedThemes];\n        } else {\n          combinedThemeArray = [...themeArr];\n        }\n\n        chrome.storage.local.clear(function () {\n          var error = chrome.runtime.lastError;\n          if (error) {\n            console.error(error);\n          }\n          // Set storage after clearing existing.\n          chrome.storage.local.set({ themes: combinedThemeArray }).then(() => {\n            console.log(\"Links set\");\n          });\n\n        });\n        chrome.storage.sync.clear(); // callback is optional\n\n      });\n\n    }\n\n  }\n\n  // Keep checking unless found iframe\n  window.setTimeout(checkIframeLoaded, 5000);\n\n}\n\nwindow.addEventListener(\"load\", () => {\n  checkIframeLoaded();\n});\n\n\nconsole.log('here')","__webpack_require__.h = () => (\"eb498f724f6a7189a986\")"],"names":[],"sourceRoot":""}